### [bt]: This is batchtools v0.9.15
### [bt]: Starting calculation of 1 jobs
### [bt]: Setting working directory to '/home/user/repos/cacb-batchtools/eq1'
Loading required package: data.table
Loading required package: R6
Loading required package: mlr3
Loading required package: mlr3learners
Loading required package: mlr3extralearners

Attaching package: ‘mlr3extralearners’

The following objects are masked from ‘package:mlr3’:

    lrn, lrns

Loading required package: mlr3pipelines
Loading required package: mlr3tuning
Loading required package: paradox
Loading required package: compboost
[2021-08-02 00:03:15] Loading new learner LearnerClassifCWB
[2021-08-02 00:03:15] Loading new learner LearnerClassifHCWB
[2021-08-02 00:03:15] Loading new learner
[2021-08-02 00:03:15] Loading tasks
[2021-08-02 00:03:18] Loading resampling
### [bt]: Memory measurement disabled
### [bt]: Starting job [batchtools job.id=2]
### [bt]: Generating problem instance for problem 'spam-fold1' ...
### [bt]: Applying algorithm 'evaluate-learner' on problem 'spam-fold1' for job 2 (seed = 31417) ...
DEBUG [00:03:19.833] [mlr3]  Skip subsetting of task 'spam' 
DEBUG [00:03:19.916] [mlr3]  Calling train method of Learner 'bin_cwb_b' on task 'spam' with 3680 observations {learner: <LearnerClassifCWB/LearnerClassif/Learner/R6>}
   1/5000   risk = 0.66  oob_risk = 0.65   test_auc = 0.15   time = 3   val_auc = 0.15   
 125/5000   risk = 0.081  oob_risk = inf   test_auc = 0.099   time = 1301473   val_auc = 0.066   
 250/5000   risk = 0.049  oob_risk = inf   test_auc = 0.11   time = 2488834   val_auc = 0.093   
 375/5000   risk = 0.034  oob_risk = inf   test_auc = 0.13   time = 3765085   val_auc = 0.12   
 500/5000   risk = 0.029  oob_risk = inf   test_auc = 0.15   time = 4996362   val_auc = 0.13   
 625/5000   risk = 0.025  oob_risk = inf   test_auc = 0.16   time = 6236263   val_auc = 0.14   
 750/5000   risk = 0.025  oob_risk = inf   test_auc = 0.18   time = 7458242   val_auc = 0.16   
 875/5000   risk = 0.027  oob_risk = inf   test_auc = 0.18   time = 8929508   val_auc = 0.16   
1000/5000   risk = 0.034  oob_risk = inf   test_auc = 0.18   time = 10212579   val_auc = 0.17   
1125/5000   risk = 0.027  oob_risk = inf   test_auc = 0.19   time = 11535536   val_auc = 0.18   

29: (function (e) 
    traceback(2L))()
28: .External(list(name = "CppMethod__invoke_void", address = <pointer: 0x56067d1bb250>, 
        dll = list(name = "Rcpp", path = "/home/user/R/x86_64-pc-linux-gnu-library/3.6/Rcpp/libs/Rcpp.so", 
            dynamicLookup = TRUE, handle = <pointer: 0x56067c7f75a0>, 
            info = <pointer: 0x56067c2f48c0>), numParameters = -1L), 
        <pointer: 0x56067fafd150>, <pointer: 0x56067e6339e0>, .pointer, 
        ...)
27: self$model$train(trace)
26: model$train(self$param_set$values$mstop)
25: get_private(learner)$.train(task)
24: .f(learner = <environment>, task = <environment>)
23: eval(expr, p)
22: eval(expr, p)
21: eval.parent(expr, n = 1L)
20: invoke(.f, .args = .args, .opts = .opts, .seed = .seed, .timeout = .timeout)
19: encapsulate(learner$encapsulate["train"], .f = train_wrapper, 
        .args = list(learner = learner, task = task), .pkgs = learner$packages, 
        .seed = NA_integer_, .timeout = learner$timeout["train"])
18: learner_train(self, task, row_ids)
17: .__Learner__train(self = self, private = private, super = super, 
        task = task, row_ids = row_ids)
16: learner$train(task_train) at #16
15: job$algorithm$fun(job = job, data = job$problem$data, instance = instance, 
        ...)
14: (function (...) 
    job$algorithm$fun(job = job, data = job$problem$data, instance = instance, 
        ...))(lid = "bin_cwb_b")
13: do.call(wrapper, job$algo.pars, envir = .GlobalEnv)
12: with_preserve_seed({
        set.seed(seed)
        code
    })
11: with_seed(job$seed, do.call(wrapper, job$algo.pars, envir = .GlobalEnv))
10: execJob.Experiment(job)
9: execJob(job)
8: doTryCatch(return(expr), name, parentenv, handler)
7: tryCatchOne(expr, names, parentenv, handlers[[1L]])
6: tryCatchList(expr, classes, parentenv, handlers)
5: tryCatch(expr, error = function(e) {
       call <- conditionCall(e)
       if (!is.null(call)) {
           if (identical(call[[1L]], quote(doTryCatch))) 
               call <- sys.call(-4L)
           dcall <- deparse(call)[1L]
           prefix <- paste("Error in", dcall, ": ")
           LONG <- 75L
           sm <- strsplit(conditionMessage(e), "\n")[[1L]]
           w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
           if (is.na(w)) 
               w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], 
                   type = "b")
           if (w > LONG) 
               prefix <- paste0(prefix, "\n  ")
       }
       else prefix <- "Error : "
       msg <- paste0(prefix, conditionMessage(e), "\n")
       .Internal(seterrmessage(msg[1L]))
       if (!silent && isTRUE(getOption("show.error.messages"))) {
           cat(msg, file = outFile)
           .Internal(printDeferredWarnings())
       }
       invisible(structure(msg, class = "try-error", condition = e))
   })
4: try(execJob(job))
3: doJobCollection.JobCollection(obj, output = output)
2: doJobCollection.character("/home/user/repos/cacb-batchtools/eq1/batchtools/jobs/job2c9474ad5567a1e7a74ac5e785cfb7fa.rds", 
       output = "/home/user/repos/cacb-batchtools/eq1/batchtools/logs/job2c9474ad5567a1e7a74ac5e785cfb7fa.log")
1: batchtools::doJobCollection("/home/user/repos/cacb-batchtools/eq1/batchtools/jobs/job2c9474ad5567a1e7a74ac5e785cfb7fa.rds", 
       output = "/home/user/repos/cacb-batchtools/eq1/batchtools/logs/job2c9474ad5567a1e7a74ac5e785cfb7fa.log")
