### [bt]: This is batchtools v0.9.15
### [bt]: Starting calculation of 1 jobs
### [bt]: Setting working directory to '/home/user/repos/cacb-batchtools/eq1'
[2021-07-28 00:02:27] Loading new learner
[2021-07-28 00:02:27] Loading tasks
[2021-07-28 00:02:29] Loading resampling
### [bt]: Memory measurement disabled
### [bt]: Starting job [batchtools job.id=59]
### [bt]: Generating problem instance for problem '168335-fold5' ...
### [bt]: Applying algorithm 'evaluate-learner' on problem '168335-fold5' for job 59 (seed = 31474) ...
DEBUG [00:02:32.002] [mlr3]  Skip subsetting of task 'Task 168335: MiniBooNE (Supervised Classification)' 
DEBUG [00:02:32.006] [mlr3]  Calling train method of Learner 'acc_acwb' on task 'Task 168335: MiniBooNE (Supervised Classification)' with 104052 observations {learner: <LearnerClassifCompboost/LearnerClassif/Learner/R6>}
   1/5000   risk = 0.56  riskauc = 0.85   time = 2   
 125/5000   risk = 0.25  riskauc = 0.96   time = 16189920   
 250/5000   risk = 0.2  riskauc = 0.97   time = 32282436   
 375/5000   risk = 0.19  riskauc = 0.97   time = 48424764   
 500/5000   risk = 0.19  riskauc = 0.97   time = 64472267   
 625/5000   risk = 0.2  riskauc = 0.97   time = 80566526   
 750/5000   risk = 0.2  riskauc = 0.97   time = 96587997   
 875/5000   risk = 0.2  riskauc = 0.98   time = 112898626   
1000/5000   risk = 0.21  riskauc = 0.98   time = 128826425   
1125/5000   risk = 0.21  riskauc = 0.98   time = 144572079   
1250/5000   risk = 0.21  riskauc = 0.98   time = 160617166   
1375/5000   risk = 0.21  riskauc = 0.98   time = 176485269   
1500/5000   risk = 0.21  riskauc = 0.98   time = 192422666   
1625/5000   risk = 0.22  riskauc = 0.98   time = 208777599   
1750/5000   risk = 0.22  riskauc = 0.98   time = 224879138   
1875/5000   risk = 0.22  riskauc = 0.98   time = 241033521   
2000/5000   risk = 0.22  riskauc = 0.97   time = 257084210   
2125/5000   risk = 0.22  riskauc = 0.97   time = 273347827   
2250/5000   risk = 0.22  riskauc = 0.97   time = 289716302   
2375/5000   risk = 0.22  riskauc = 0.97   time = 306124402   
2500/5000   risk = 0.22  riskauc = 0.97   time = 322743980   
2625/5000   risk = 0.22  riskauc = 0.97   time = 339312676   
2750/5000   risk = 0.22  riskauc = 0.97   time = 356086056   
2875/5000   risk = 0.22  riskauc = 0.97   time = 372517213   
3000/5000   risk = 0.22  riskauc = 0.97   time = 389169980   
3125/5000   risk = 0.22  riskauc = 0.97   time = 405675244   
3250/5000   risk = 0.23  riskauc = 0.97   time = 422248373   
3375/5000   risk = 0.23  riskauc = 0.97   time = 439175796   
3500/5000   risk = 0.23  riskauc = 0.97   time = 455881967   
3625/5000   risk = 0.23  riskauc = 0.97   time = 472473826   
3750/5000   risk = 0.23  riskauc = 0.97   time = 489285773   
3875/5000   risk = 0.23  riskauc = 0.97   time = 505791717   
4000/5000   risk = 0.23  riskauc = 0.97   time = 522575544   
4125/5000   risk = 0.23  riskauc = 0.97   time = 539535533   
4250/5000   risk = 0.24  riskauc = 0.97   time = 556593807   
4375/5000   risk = 0.25  riskauc = 0.97   time = 573781945   
4500/5000   risk = 0.25  riskauc = 0.97   time = 591065664   

31: (function (e) 
    traceback(2L))()
30: .External(list(name = "CppMethod__invoke_void", address = <pointer: 0x55a0100a29f0>, 
        dll = list(name = "Rcpp", path = "/home/user/R/x86_64-pc-linux-gnu-library/3.6/Rcpp/libs/Rcpp.so", 
            dynamicLookup = TRUE, handle = <pointer: 0x559fe7f53550>, 
            info = <pointer: 0x559fdab9cd00>), numParameters = -1L), 
        <pointer: 0x55a001d143d0>, <pointer: 0x559fe14ad3d0>, .pointer, 
        ...)
29: self$model$train(trace)
28: model$train(iterations, trace)
27: compboost::boostSplines(data = task$data(), target = task$target_names, 
        iterations = self$param_set$values$mstop, optimizer = optimizer, 
        loss = compboost::LossBinomial$new(), df = self$param_set$values$df, 
        learning_rate = self$param_set$values$learning_rate, oob_fraction = oobf, 
        stop_args = stop_args, bin_root = self$param_set$values$bin_root, 
        bin_method = self$param_set$values$bin_method, df_cat = self$param_set$values$df_cat, 
        additional_risk_log = additional_risk_log)
26: get_private(learner)$.train(task)
25: .f(learner = <environment>, task = <environment>)
24: eval(expr, p)
23: eval(expr, p)
22: eval.parent(expr, n = 1L)
21: invoke(.f, .args = .args, .opts = .opts, .seed = .seed, .timeout = .timeout)
20: encapsulate(learner$encapsulate["train"], .f = train_wrapper, 
        .args = list(learner = learner, task = task), .pkgs = learner$packages, 
        .seed = NA_integer_, .timeout = learner$timeout["train"])
19: learner_train(self, task, row_ids)
18: .__Learner__train(self = self, private = private, super = super, 
        task = task, row_ids = row_ids)
17: learner$train(task_train) at add-experiments.R#52
16: job$algorithm$fun(job = job, data = job$problem$data, instance = instance, 
        ...)
15: (function (...) 
    job$algorithm$fun(job = job, data = job$problem$data, instance = instance, 
        ...))(lid = "acc_acwb")
14: do.call(wrapper, job$algo.pars, envir = .GlobalEnv)
13: with_preserve_seed({
        set.seed(seed)
        code
    })
12: with_seed(job$seed, do.call(wrapper, job$algo.pars, envir = .GlobalEnv))
11: execJob.Experiment(job)
10: execJob(job)
9: doTryCatch(return(expr), name, parentenv, handler)
8: tryCatchOne(expr, names, parentenv, handlers[[1L]])
7: tryCatchList(expr, classes, parentenv, handlers)
6: tryCatch(expr, error = function(e) {
       call <- conditionCall(e)
       if (!is.null(call)) {
           if (identical(call[[1L]], quote(doTryCatch))) 
               call <- sys.call(-4L)
           dcall <- deparse(call)[1L]
           prefix <- paste("Error in", dcall, ": ")
           LONG <- 75L
           sm <- strsplit(conditionMessage(e), "\n")[[1L]]
           w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
           if (is.na(w)) 
               w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], 
                   type = "b")
           if (w > LONG) 
               prefix <- paste0(prefix, "\n  ")
       }
       else prefix <- "Error : "
       msg <- paste0(prefix, conditionMessage(e), "\n")
       .Internal(seterrmessage(msg[1L]))
       if (!silent && isTRUE(getOption("show.error.messages"))) {
           cat(msg, file = outFile)
           .Internal(printDeferredWarnings())
       }
       invisible(structure(msg, class = "try-error", condition = e))
   })
5: try(execJob(job))
4: doJobCollection.JobCollection(jc, output = jc$log.file)
3: doJobCollection(jc, output = jc$log.file)
2: reg$cluster.functions$submitJob(reg = reg, jc = jc)
1: submitJobs()
