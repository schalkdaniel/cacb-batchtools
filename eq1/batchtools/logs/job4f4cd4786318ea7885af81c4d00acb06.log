### [bt]: This is batchtools v0.9.15
### [bt]: Starting calculation of 1 jobs
### [bt]: Setting working directory to '/home/user/repos/cacb-batchtools/eq1'
[2021-07-20] Loading new learner
[2021-07-20 22:16:23] Loading tasks
[2021-07-20 22:16:26] Loading resampling
### [bt]: Memory measurement disabled
### [bt]: Starting job [batchtools job.id=76]
### [bt]: Generating problem instance for problem '189866-fold1' ...
### [bt]: Applying algorithm 'evaluate-learner' on problem '189866-fold1' for job 76 (seed = 31491) ...

19: (function (e) 
    traceback(2L))()
18: .__TaskClassif__clone(self = self, private = private, super = super, 
        deep = deep)
17: data$task$clone(deep = TRUE) at add-experiments.R#31
16: job$algorithm$fun(job = job, data = job$problem$data, instance = instance, 
        ...)
15: (function (...) 
    job$algorithm$fun(job = job, data = job$problem$data, instance = instance, 
        ...))(lid = "bin_cwb_nb")
14: do.call(wrapper, job$algo.pars, envir = .GlobalEnv)
13: with_preserve_seed({
        set.seed(seed)
        code
    })
12: with_seed(job$seed, do.call(wrapper, job$algo.pars, envir = .GlobalEnv))
11: execJob.Experiment(job)
10: execJob(job)
9: doTryCatch(return(expr), name, parentenv, handler)
8: tryCatchOne(expr, names, parentenv, handlers[[1L]])
7: tryCatchList(expr, classes, parentenv, handlers)
6: tryCatch(expr, error = function(e) {
       call <- conditionCall(e)
       if (!is.null(call)) {
           if (identical(call[[1L]], quote(doTryCatch))) 
               call <- sys.call(-4L)
           dcall <- deparse(call)[1L]
           prefix <- paste("Error in", dcall, ": ")
           LONG <- 75L
           sm <- strsplit(conditionMessage(e), "\n")[[1L]]
           w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
           if (is.na(w)) 
               w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], 
                   type = "b")
           if (w > LONG) 
               prefix <- paste0(prefix, "\n  ")
       }
       else prefix <- "Error : "
       msg <- paste0(prefix, conditionMessage(e), "\n")
       .Internal(seterrmessage(msg[1L]))
       if (!silent && isTRUE(getOption("show.error.messages"))) {
           cat(msg, file = outFile)
           .Internal(printDeferredWarnings())
       }
       invisible(structure(msg, class = "try-error", condition = e))
   })
5: try(execJob(job))
4: doJobCollection.JobCollection(jc, output = jc$log.file)
3: doJobCollection(jc, output = jc$log.file)
2: reg$cluster.functions$submitJob(reg = reg, jc = jc)
1: submitJobs()
